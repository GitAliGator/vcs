name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest
        # Install torch for testing (simulates Colab/user environment)
        pip install torch
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        # Test package build and all public APIs
        echo "Testing package structure and public APIs..."
        
        # Test basic package import and version
        python -c "import vcs; print(f'✅ VCS version: {vcs.__version__}')"
        
        # Test all public APIs dynamically from __all__
        python << 'EOF'
        import vcs
        print('Testing all public APIs from __all__...')
        failed_imports = []
        for api_name in vcs.__all__:
            try:
                getattr(vcs, api_name)
                print(f'✅ {api_name}')
            except Exception as e:
                failed_imports.append((api_name, str(e)))
                print(f'❌ {api_name}: {e}')
        
        if failed_imports:
            print(f'Failed to import {len(failed_imports)} APIs')
            exit(1)
        else:
            print(f'✅ All {len(vcs.__all__)} public APIs importable')
        EOF
        
        # Test exact configuration values
        python << 'EOF'
        import vcs
        print('Testing configuration constants...')
        assert vcs.DEFAULT_LCT == 0, f'LCT should be 0, got {vcs.DEFAULT_LCT}'
        assert vcs.DEFAULT_CONTEXT_CUTOFF_VALUE == 0.6, f'Context cutoff should be 0.6, got {vcs.DEFAULT_CONTEXT_CUTOFF_VALUE}'
        assert vcs.DEFAULT_CONTEXT_WINDOW_CONTROL == 4.0, f'Context window control should be 4.0, got {vcs.DEFAULT_CONTEXT_WINDOW_CONTROL}'
        assert vcs.DEFAULT_CHUNK_SIZE == 1, f'Chunk size should be 1, got {vcs.DEFAULT_CHUNK_SIZE}'
        print('✅ All configuration values are correct')
        EOF
        
        # Test quickstart example dynamically from documentation
        python << 'EOF'
        import subprocess
        import sys
        import re
        import os
        
        print('Testing quickstart example from documentation...')
        
        # Find and read quickstart examples from documentation
        quickstart_files = [
            'README.md',
            'docs/sphinx/source/getting_started.rst', 
            'docs/sphinx/source/usage.rst'
        ]
        
        quickstart_code = None
        source_file = None
        
        for filepath in quickstart_files:
            if os.path.exists(filepath):
                print(f'📖 Reading {filepath}...')
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Look for Python code blocks with VCS examples
                    if filepath.endswith('.md'):
                        # Markdown format: ```python ... ```
                        patterns = [
                            r'```python\s*\n(.*?from vcs import compute_vcs_score.*?)```',
                            r'```python\s*\n(.*?sentence_transformers.*?compute_vcs_score.*?)```'
                        ]
                    else:
                        # RST format: .. code-block:: python
                        patterns = [
                            r'\.\. code-block:: python\s*\n\n(.*?(?=\n\n[^\s]|\n\.\.|$))',
                            r'python\s*\n(.*?sentence_transformers.*?compute_vcs_score.*?)(?=\n\n|\n\.\.|$)'
                        ]
                    
                    for pattern in patterns:
                        matches = re.findall(pattern, content, re.DOTALL | re.MULTILINE)
                        for match in matches:
                            if 'compute_vcs_score' in match and ('sentence_transformers' in match or 'embedding_function' in match):
                                quickstart_code = match.strip()
                                source_file = filepath
                                print(f'✅ Found quickstart example in {filepath}')
                                break
                        if quickstart_code:
                            break
                    if quickstart_code:
                        break
                        
                except Exception as e:
                    print(f'⚠️ Could not read {filepath}: {e}')
        
        if not quickstart_code:
            print('❌ No quickstart example found in documentation')
            exit(1)
        
        print(f'📝 Using example from: {source_file}')
        print('🔧 Installing dependencies as needed...')
        
        # Install dependencies mentioned in the quickstart code
        dependencies = []
        if 'sentence_transformers' in quickstart_code:
            dependencies.append('sentence-transformers')
        if 'nltk' in quickstart_code:
            dependencies.append('nltk')
        
        if dependencies:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install'] + dependencies, 
                                     stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
                print(f'✅ Installed: {", ".join(dependencies)}')
            except subprocess.CalledProcessError as e:
                print(f'❌ Failed to install dependencies: {e}')
                exit(1)
        
        # Execute the dynamically found quickstart example
        print('🚀 Executing quickstart example...')
        try:
            # Prepare the execution environment
            exec_globals = {'__name__': '__main__'}
            
            # Clean up the code for execution
            cleaned_code = quickstart_code
            
            # Add necessary imports if missing
            if 'import torch' not in cleaned_code:
                cleaned_code = 'import torch\n' + cleaned_code
            if 'from vcs import compute_vcs_score' not in cleaned_code:
                cleaned_code = 'from vcs import compute_vcs_score\n' + cleaned_code
            
            # Execute the code
            exec(cleaned_code, exec_globals)
            
            # Validate that we got results
            if 'result' in exec_globals:
                result = exec_globals['result']
                required_keys = ['VCS', 'GAS', 'LAS', 'NAS']
                for key in required_keys:
                    if key in result:
                        assert isinstance(result[key], (int, float)), f'{key} should be numeric'
                        assert 0 <= result[key] <= 1, f'{key} should be between 0 and 1, got {result[key]}'
                
                print('✅ Quickstart example executed successfully!')
                print(f'📊 Results found with keys: {list(result.keys())}')
            else:
                print('⚠️ No result variable found, but execution completed without errors')
            
        except Exception as e:
            print(f'❌ Quickstart example failed: {e}')
            print(f'🔍 Code being executed:')
            print('--- START ---')
            print(cleaned_code[:500] + '...' if len(cleaned_code) > 500 else cleaned_code)
            print('--- END ---')
            exit(1)
        EOF
        
        echo "✅ All package tests passed"
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test package build
      run: python -m build